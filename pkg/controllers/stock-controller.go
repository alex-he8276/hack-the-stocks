package controllers

import (
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/alex-he8276/hack-the-stocks/pkg/config"
	"github.com/alex-he8276/hack-the-stocks/pkg/models"
	"github.com/alex-he8276/hack-the-stocks/pkg/utils"
	"github.com/cohere-ai/cohere-go"
	"github.com/gorilla/mux"
)

const (
	numDays          = 2
	tweets           = 10
	twitterBaseURLP1 = "https://api.twitter.com/2/tweets/search/recent?query=%22"
	twitterBaseURLP2 = "%22%20lang%3Aen%20-has%3Alinks&max_results=10&end_time="
)

var examples = []cohere.Example{
	{
		Text:  "The stock market is going up",
		Label: "positive",
	},
	{
		Text:  "Sell or you'll regret it",
		Label: "negative",
	},
}

type TwitterResult struct {
	Tweets []Tweet `json:"data"`
}

type Tweet struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

// type TwitterMetadata struct {
// 	NewestID    string `json:"newest_id"`
// 	OldestID    string `json:"oldest_id"`
// 	ResultCount int    `json:"result_count"`
// }

type StockSentimentAndPrice struct {
	Stock [numDays]models.Stock
}

func checkDatabase(ticker string, date time.Time) (*models.Stock, bool) {
	stock := models.GetStockByTickerAndDate(ticker, date)
	if stock.Ticker == "" {
		return stock, false
	}
	return stock, true
}

func retrieveTweets(ticker string, date time.Time) (tweets []string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// curl "https://api.twitter.com/2/tweets/search/recent?query=%22$TICKER%22" -H "Authorization: Bearer $BEARERTOKEN"
	url := fmt.Sprintf("%s%s%s%s", twitterBaseURLP1, ticker, twitterBaseURLP2, date.Format(time.RFC3339))
	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", config.TWITTER_BEARER_TOKEN))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal("failed retreiving tweets", err)
	}
	defer resp.Body.Close()

	twitterResponse := TwitterResult{}
	utils.ParseBody(resp, &twitterResponse)

	for _, tweet := range twitterResponse.Tweets {
		tweets = append(tweets, tweet.Text)
		fmt.Println(tweet.Text)
	}
	return tweets
}

func classify(ticker string, date time.Time, tweets []string) {

	// stock := models.GetStockByTickerAndDate(ticker, date)
	// if stock.Ticker == "" {
	// 	return
	// }
	// sentiment := cohere.Classify(stock.Ticker)
	// stock.Sentiment = sentiment
	// models.UpdateStock(stock)
}

func GetStockSentimentAndPrice(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	ticker := vars["ticker"]
	// array := StockSentimentAndPrice{}
	hi := 0

	workersWG := sync.WaitGroup{}
	for i := 0; i < numDays; i++ {
		workersWG.Add(1)

		// Worker for a given date i days in the past
		go func(i int) {
			defer workersWG.Done()

			date := time.Now().Add(-24*time.Duration(i)*time.Hour - time.Minute)

			retrieveTweets(ticker, date)
			// // stock, exists := checkDatabase(ticker, date)

			// if !exists {
			// 	// call twitter api
			// 	// classify sentiment
			// 	// save to database
			// }

			// array.Stock[i] = *stock

			hi = hi + 1

		}(i)
	}
	workersWG.Wait()
	w.Write([]byte(fmt.Sprintf("%s - %d", ticker, hi)))
}
