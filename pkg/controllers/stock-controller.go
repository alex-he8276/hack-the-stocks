package controllers

import (
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/alex-he8276/hack-the-stocks/pkg/config"
	"github.com/alex-he8276/hack-the-stocks/pkg/models"
	"github.com/cohere-ai/cohere-go"
	"github.com/gorilla/mux"
)

const (
	numDays        = 7
	twitterBaseURL = "https://api.twitter.com/2/tweets/search/recent?query="
)

var examples = []cohere.Example{
	{
		Text:  "The stock market is going up",
		Label: "positive",
	},
	{
		Text:  "Sell or you'll regret it",
		Label: "negative",
	},
}

type StockSentimentAndPrice struct {
	Stock [numDays]models.Stock
}

func checkDatabase(ticker string, date time.Time) (*models.Stock, bool) {
	stock := models.GetStockByTickerAndDate(ticker, date)
	if stock.Ticker == "" {
		return stock, false
	}
	return stock, true
}

func retrieveTweets(ticker string, date time.Time) (tweets []string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl "https://api.twitter.com/2/tweets/search/recent?query=%22$TICKER%22" -H "Authorization: Bearer $BEARERTOKEN"
	url := fmt.Sprintf("%s%%22%s%%22", twitterBaseURL, ticker)
	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", config.TWITTER_BEARER_TOKEN))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal("failed retreiving tweets", err)
	}

	fmt.Println(resp.Body)

	defer resp.Body.Close()

}

func classify(ticker string, date time.Time, tweets []string) {

	// stock := models.GetStockByTickerAndDate(ticker, date)
	// if stock.Ticker == "" {
	// 	return
	// }
	// sentiment := cohere.Classify(stock.Ticker)
	// stock.Sentiment = sentiment
	// models.UpdateStock(stock)
}

func GetStockSentimentAndPrice(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	ticker := vars["ticker"]
	array := StockSentimentAndPrice{}

	workersWG := sync.WaitGroup{}
	for i := 0; i < numDays; i++ {
		workersWG.Add(1)

		// Worker for a given date i days in the past
		go func(i int) {
			defer workersWG.Done()

			date := time.Now().Add(-24 * time.Duration(i) * time.Hour)

			stock, exists := checkDatabase(ticker, date)

			if !exists {
				// call twitter api
				// classify sentiment
				// save to database
			}

			array.Stock[i] = *stock

		}(i)
	}
}
